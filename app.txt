""""""
from datetime import datetime, timedelta

from wsgiref import simple_server

from flask import Flask, session


from threading import Thread, Event

import uuid
import os

from flask_cors import CORS, cross_origin
from entity_layer.scheduler.scheduler import Scheduler

global process_value
from controller.home_controller.home_controller import HomeController
from controller.file_operation_controller.file_operation_controller import FileOperationController
from controller.authentication_contoller.authentication_controller import AuthenticationController
from controller.project_controller.project_controller import ProjectController
from controller.project_controller.projects.WaferFaultDetection_new.main import WaferFaultDetectionProjectController
from controller.machine_learning_controller.machine_learning_controller import MachineLearningController

from controller.visualization_controller.visualization_controller import VisualizationController
from project_library_layer.initializer.initializer import Initializer
from thread_layer.train_model_thread.train_model_thread import TrainModelThread
from thread_layer.predict_from_model_thread.predict_from_model_thread import PredictFromModelThread
from logging_layer.logger.log_request import LogRequest
from logging_layer.logger.log_exception import LogExceptionDetail
from controller.scheduler_controller.scheduler_controller import SchedulerController


class Config:
    SCHEDULER_API_ENABLED = True


process_value = "START"
import random

UPLOAD_FOLDER = 'file/'
ALLOWED_EXTENSIONS = {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif'}

thread = Thread()
thread_stop_event = Event()

initial = Initializer()
app = Flask(__name__)
app.secret_key = initial.get_session_secret_key()
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
CORS(app)
socket_io = SocketIO(app, cors_allowed_origins="*")


@socket_io.on('begin_training_process', namespace="/training_model")
def start_training_of_model(data):
    log_writer = None
    project_id = None
    try:
        project_id = int(data['project_id'])
        executed_by = session['email_address']
        execution_id = str(uuid.uuid4())
        log_writer = LogRequest(executed_by=executed_by, execution_id=execution_id)
        log_writer.log_start(dict(data))
        train_predict_thread_obj_ref = TrainModelThread(project_id=project_id, executed_by=executed_by,
                                                        execution_id=execution_id, socket_io=socket_io,
                                                        log_writer=log_writer)
        response = train_predict_thread_obj_ref.get_running_status_of_training_thread()
        previous_execution_thread_status = None
        if response is not None:
            if 'is_running' in response:
                previous_execution_thread_status = response['is_running']
        if previous_execution_thread_status:
            emit("training_completed" + str(project_id),
                 {'message': "Training/ Prediction model thread is already running"},
                 namespace="/training_model")

        if previous_execution_thread_status is None or not previous_execution_thread_status:
            train_predict_thread_obj_ref.start()
            emit("started_training" + str(project_id),
                 {'message': "We have started training and execution started  by {} and execution id  "
                             "is {}".format(session['email_address'],
                                            execution_id)},
                 namespace="/training_model")
    except Exception as e:
        if log_writer is not None:
            log_writer.log_stop({'status': False, 'error_message': str(e)})
        log_exception = LogExceptionDetail(log_writer.executed_by, log_writer.execution_id)
        log_exception.log(str(e))
        emit("started_training" + str(project_id), {'message': str(e)}, namespace="/training_model")


@socket_io.on('begin_prediction_process', namespace="/training_model")
def start_prediction_from_model(data):
    log_writer = None
    project_id = None
    try:

        project_id = int(data['project_id'])
        executed_by = session['email_address']
        execution_id = str(uuid.uuid4())
        log_writer = LogRequest(executed_by=executed_by, execution_id=execution_id)
        log_writer.log_start(dict(data))
        train_predict_thread_obj_ref = PredictFromModelThread(project_id=project_id, executed_by=executed_by,
                                                              execution_id=execution_id, socket_io=socket_io,
                                                              log_writer=log_writer)
        response = train_predict_thread_obj_ref.get_running_status_of_prediction_thread()
        previous_execution_thread_status = None
        if response is not None:
            if 'is_running' in response:
                previous_execution_thread_status = response['is_running']
        if previous_execution_thread_status:
            emit("prediction_completed" + str(project_id),
                 {'message': "Training/ Prediction model thread is already running"},
                 namespace="/training_model")

        if previous_execution_thread_status is None or not previous_execution_thread_status:
            train_predict_thread_obj_ref.start()
            emit("prediction_started" + str(project_id),
                 {'message': "We have started prediction and execution started  by {} and execution id  "
                             "is {}".format(session['email_address'],
                                            execution_id)},
                 namespace="/training_model")
    except Exception as e:
        if log_writer is not None:
            log_writer.log_stop({'status': False, 'error_message': str(e)})
        log_exception = LogExceptionDetail(log_writer.executed_by, log_writer.execution_id)
        log_exception.log(str(e))
        emit("prediction_started" + str(project_id), {'message': str(e)}, namespace="/training_model")


sch = Scheduler(socket_io=socket_io)
sch.start()


@socket_io.on('job_at_specific_time', namespace="/schedule_job")
def job_at_specific_time(data):
    print('job_at_specific_time')
    log_writer = None
    execution_id = str(uuid.uuid4())
    emit("job_response", {'message': "Entered into job_at_specific_time"},
         namespace="/schedule_job")
    try:

        if 'email_address' in session:
            project_id = int(data['project_id'])
            job_name = data['job_name']
            date_time = data['date_time']
            executed_by = session['email_address']
            action_name = data['action_name'].split(',')[:-1]
            log_writer = LogRequest(executed_by=executed_by, execution_id=execution_id)
            log_writer.log_start(dict(data))
            emit("job_response", {'message': "Started creating job".format(job_name)},
                 namespace="/schedule_job")
            res = sch.add_job_at_time(date_time=date_time, job_name=job_name, project_id=project_id,
                                      email_address=executed_by, action_name=action_name)
            log_writer.log_stop({'status': True, })

            emit("job_response", {'message': "Job {} added successfully".format(job_name)},
                 namespace="/schedule_job")
        else:
            raise Exception("Please first login to you account")
    except Exception as e:
        if log_writer is not None:
            log_writer.log_stop({'status': False, 'error_message': str(e)})
            log_exception = LogExceptionDetail(log_writer.executed_by, log_writer.execution_id)
            log_exception.log(str(e))
        emit("job_response", {'message': str(e)}, namespace="/schedule_job")


@socket_io.on('job_within_a_day', namespace="/schedule_job")
def job_within_a_day(data):
    print("job_within_a_day")
    """
         is_reoccurring:is_reoccurring,
     job_name:job_name,
     project_id:project_id,
     time_type:time_type,
     time_value:time_value,
    :param data:
    :return:
    """
    log_writer = None
    execution_id = str(uuid.uuid4())
    try:

        if 'email_address' in session:
            project_id = int(data['project_id'])
            job_name = data['job_name']
            time_type = data['time_type']
            time_value = int(data['time_value'])
            is_reoccurring = data['is_reoccurring']
            executed_by = session['email_address']
            action_name = data['action_name'].split(',')[:-1]
            log_writer = LogRequest(executed_by=executed_by, execution_id=execution_id)
            log_writer.log_start(dict(data))
            if is_reoccurring == 'No':
                date_time_val = None
                if time_type == 'hour':
                    date_time_val = datetime.now() + timedelta(hours=time_value)
                if time_type == 'minute':
                    date_time_val = datetime.now() + timedelta(minutes=time_value)
                if time_type == 'second':
                    date_time_val = datetime.now() + timedelta(seconds=time_value)
                    if date_time_val is None:
                        raise Exception("Date time required!")
                date_time_val = str(date_time_val)
                res = sch.add_job_at_time(date_time=date_time_val, job_name=job_name, project_id=project_id,
                                          email_address=executed_by, action_name=data['action_name'].split(',')[:-1])
            else:
                if time_type == 'hour':
                    sch.add_recurring_job_in_hour(time_value, job_name=job_name, project_id=project_id,
                                                  email_address=executed_by,
                                                  action_name=data['action_name'].split(',')[:-1])
                if time_type == 'minute':
                    sch.add_recurring_job_in_minute(time_value, job_name=job_name, project_id=project_id,
                                                    email_address=executed_by,
                                                    action_name=data['action_name'].split(',')[:-1])
                if time_type == 'second':
                    sch.add_recurring_job_in_second(time_value, job_name=job_name, project_id=project_id,
                                                    email_address=executed_by,
                                                    action_name=data['action_name'].split(',')[:-1])

            log_writer.log_stop({'status': True, })

            emit("job_response", {'message': "Job {} added successfully".format(job_name)},
                 namespace="/schedule_job")
        else:
            raise Exception("Please first login to you account")
    except Exception as e:
        if log_writer is not None:
            log_writer.log_stop({'status': False, 'error_message': str(e)})
            log_exception = LogExceptionDetail(log_writer.executed_by, log_writer.execution_id)
            log_exception.log(str(e))
        emit("job_response", {'message': str(e)}, namespace="/schedule_job")


@socket_io.on('job_on_week_day', namespace="/schedule_job")
def job_on_week_day(data):
    print("job_on_week_day")
    log_writer = None
    execution_id = str(uuid.uuid4())
    try:

        if 'email_address' in session:
            project_id = int(data['project_id'])
            job_name = data['job_name']
            week_day_names = data['week_day_names'][:-1]
            is_reoccurring = data['is_reoccurring']
            executed_by = session['email_address']
            log_writer = LogRequest(executed_by=executed_by, execution_id=execution_id)
            log_writer.log_start(dict(data))

            sch.add_recurring_job_weekly_basis(is_reoccurring=is_reoccurring, days_of_week=week_day_names,
                                               job_name=job_name, project_id=project_id, email_address=executed_by,
                                               is_record_inserted=False,
                                               action_name=data['action_name'].split(',')[:-1]
                                               )
            log_writer.log_stop({'status': True, })

            emit("job_response", {'message': "Job {} added successfully".format(job_name)},
                 namespace="/schedule_job")

    except Exception as e:
        if log_writer is not None:
            log_writer.log_stop({'status': False, 'error_message': str(e)})
            log_exception = LogExceptionDetail(log_writer.executed_by, log_writer.execution_id)
            log_exception.log(str(e))
        emit("job_response", {'message': str(e)}, namespace="/schedule_job")

    """
    schedule_job_socket.emit('job_on_week_day',{
        week_day_names:week_day_names,
        job_name:job_name,
        project_id:project_id,
        is_reoccurring:is_reoccurring
    :param data:
    :return:
    """


@socket_io.on('remove_job', namespace="/schedule_job")
def remove_job(data):
    print("remove job entered")
    log_writer = None
    execution_id = str(uuid.uuid4())
    try:
        if 'email_address' in session:
            executed_by = session['email_address']
            log_writer = LogRequest(executed_by=executed_by, execution_id=execution_id)
            log_writer.log_start(dict(data))
            job_id = data['job_id']
            sch.remove_job_by_id(job_id=job_id)
            log_writer.log_stop({'status': True, })
            emit("remove_job_response", {'message': "Job removed successfully"}, namespace="/schedule_job")
        else:
            raise Exception("Please first login to you account")
    except Exception as e:
        if log_writer is not None:
            log_writer.log_stop({'status': False, 'error_message': str(e)})
            log_exception = LogExceptionDetail(log_writer.executed_by, log_writer.execution_id)
            log_exception.log(str(e))
        emit("remove_job_response", {'message': str(e)}, namespace="/schedule_job")


home_controller = HomeController()

app.add_url_rule('/', view_func=home_controller.index, methods=['GET', 'POST'])

authentication_controller = AuthenticationController()
app.add_url_rule('/validate_email_address', view_func=authentication_controller.validate_email_address,
                 methods=['GET', 'POST'])
app.add_url_rule('/register', view_func=authentication_controller.register, methods=['GET', 'POST'])
app.add_url_rule('/login', view_func=authentication_controller.login, methods=['GET', 'POST'])
app.add_url_rule('/logout', view_func=authentication_controller.logout, methods=['GET', 'POST'])

file_operation_controller = FileOperationController()
app.add_url_rule('/cloud_list_directory', view_func=file_operation_controller.cloud_list_directory,
                 methods=['GET', 'POST'])
app.add_url_rule('/list_directory', view_func=file_operation_controller.list_directory, methods=['GET', 'POST'])
app.add_url_rule('/upload_files', view_func=file_operation_controller.upload_files, methods=['GET', 'POST'])
app.add_url_rule('/create_folder', view_func=file_operation_controller.create_folder, methods=['GET', 'POST'])
app.add_url_rule('/delete_folder', view_func=file_operation_controller.delete_folder, methods=['GET', 'POST'])
app.add_url_rule('/delete_file', view_func=file_operation_controller.delete_file, methods=['GET', 'POST'])
app.add_url_rule('/upload_file', view_func=file_operation_controller.upload_file_, methods=['GET', 'POST'])

project_controller = ProjectController()
app.add_url_rule('/project', view_func=project_controller.project_list, methods=['GET', 'POST'])
app.add_url_rule('/project_detail', view_func=project_controller.project_detail, methods=['GET', 'POST'])
app.add_url_rule('/save_project', view_func=project_controller.save_project_data, methods=['GET', 'POST'])
app.add_url_rule('/save_project_config', view_func=project_controller.save_project_configuration,
                 methods=['GET', 'POST'])

wafer_controller = WaferFaultDetectionProjectController()
# app.add_url_rule('/wafer/home',view_func=wafer_controller.home,methods=['GET', 'POST'])
app.add_url_rule('/wafer/train', view_func=wafer_controller.trainRouteClient, methods=['GET', 'POST'])
app.add_url_rule('/wafer/predict', view_func=wafer_controller.predictRouteClient, methods=['GET', 'POST'])

machine_learning_controller = MachineLearningController()
app.add_url_rule('/train', view_func=machine_learning_controller.train_route_client, methods=['GET', 'POST'])
app.add_url_rule('/predict', view_func=machine_learning_controller.predict_route_client, methods=['GET', 'POST'])

visualization_controller = VisualizationController()

app.add_url_rule('/dashboard', view_func=visualization_controller.dashboard, methods=['GET', 'POST'])
"""
app.add_url_rule('/dashboard', view_func=visualiztion_controller.report, methods=['GET', 'POST'])
app.add_url_rule('/bar', view_func=visualiztion_controller.change_features, methods=['GET', 'POST'])
"""
app.add_url_rule('/report', view_func=visualization_controller.visualization_project_list, methods=['GET', 'POST'])
app.add_url_rule('/report_detail', view_func=visualization_controller.report_detail, methods=['GET', 'POST'])
app.add_url_rule('/graph', view_func=visualization_controller.display_graph, methods=['GET', 'POST'])

scheduler_controller = SchedulerController()
app.add_url_rule('/scheduler', view_func=scheduler_controller.scheduler_index, methods=['GET', 'POST'])

socket_io.run(app)
if __name__ == "__main__":
    app.run(debug=True)
